#summary Как установить SmallPOS
#labels installation,postgresql

= Ограничения =

 # СУБД - PostgreSQL (протестировано с версией *8.4.8-1*, скачать которую для Windows можно [http://www.enterprisedb.com/products-services-training/pgdownload#windows здесь]).
 # СУБД и образ с системой устанавливаются на один и тот же компьютер.
 # Smalltalk-код приводится для проекта *ПолиСтальГрупп*.

= Дано =

 # Образ со SmallPOS'ом.
 # Дамп базы данных (он же бэкап).
 # PostgreSQL.

= Установка =

== PostgreSQL: установка и восстановление базы ==

==== Windows ====

 # Установить PostgreSQL. В процессе установки все параметры оставить по умолчанию. В качестве пароля суперпользователя ввести *password*.
 # Открыть консоль и перейти в папку `C:\Program Files\PostgreSQL\8.4\bin`. Все консольные утилиты, используемые ниже, находятся в этой папке.
 # Создать базу данных (заменить `dbname` на имя вашей базы):
  * `createdb.exe -U postgres dbname`
 # Восстановить базу из дампа (путь указать в кавычках, если он содержит пробелы):
  * `pg_restore.exe -U postgres -d dbname "путь к дампу"`

==== Ubuntu ====

 # Установить PostgreSQL и задать суперпользователю пароль *password*. Существует масса инструкций по данной теме, поэтому не вижу смысла писать свою.
 # Открыть терминал с правами пользователя `postgres`:
  * `su postgres`
 # Создать базу данных (заменить `dbname` на имя вашей базы):
  * `createdb dbname`
 # Восстановить базу из дампа:
  * `pg_restore -d dbname путь_к_дампу`

== Настройка образа ==

 # Скопировать и запустить образ со SmallPOS'ом.
 # В образе (см. раздел *Дополнительно*):
  * Выполнить код: `SmallPOSInterface initRoot: PMGroupGeneral session: PMGroupSession`.
  * Обновить список шрифтов.
  * Сохранить сделанные изменения.
 # Сделать так, чтобы образ загружался при включении компьютера.

Если все было сделано правильно, то проект будет доступен по адресу: http://127.0.0.1:8080/seaside/SmallPOS.

= Перенос на другой компьютер =

 # Сделать бэкап базы данных на старом компьютере.
 # Выполнить все шаги раздела *Установка*.

= PostgreSQL =

== Как сделать бэкап ==

==== Windows ====

 # Открыть консоль и перейти в папку `C:\Program Files\PostgreSQL\8.4\bin`.
 # Выполнить команду, заменив `dump_name` и `dbname` на имя дампа и имя базы, соответственно:
  * `pg_dump.exe --host localhost --port 5432 --username postgres --format custom --blobs --file dump_name dbname`

В случае с Windows 7 может быть такое, что команда отработает без ошибок, но дамп в указанной папке так и не появится. Он будет создан в папке `C:\Users\username\AppData\Local\VirtualStore`. Поэтому, чтобы этого избежать необходимо запустить консоль с правами администратора и повторно выполнить команду.

==== Ubuntu ====

 # Выполнить команду, заменив `dump_name` и `dbname` на имя дампа и имя базы, соответственно:
  * `pg_dump --host localhost --port 5432 --username postgres --format custom --blobs --file dump_name dbname`

== Бэкап по расписанию ==

==== Windows ====

 # Создать файл `pgpass.conf` и поместить его в защищенную директорию, доступную только суперпользователю (скорее всего этот файл появится после установки PostgreSQL в папке `...\AppData\Roaming\postgresql\`). О том какой формат должен иметь данный файл можно почитать [http://www.postgresql.org/docs/9.0/static/libpq-pgpass.html тут].
 # Создать `bat-`файл, содержащий следующий код:
{{{
# Если в пути к файлу встречается пробел, то путь необходимо 
# указать в двойных кавычках. В противном случае кавычки не нужны.
# ----------------------------------------------------------------
# Заменить <pgpass.conf> на полный путь к файлу pgpass.conf.
# Заменить <pg_dump.exe> на полный путь к утилите pg_dump.
# Заменить <backup_folder> на полный путь к защищенной папке, 
# в которой будут храниться бэкапы.
# Заменить dbname на название вашей базы данных.

@echo off
  SET PGPASSFILE=<pgpass.conf>

  For /f "tokens=1-3 delims=/." %%a in ('date /t') do (set mydate=%%a_%%b_%%c)
  set mydate=%mydate: =%

  set BACKUP_FILE=%mydate%.backup

  <pg_dump.exe> --host localhost --port 5432 --username postgres --format custom --blobs --no-password --file <backup_folder>\dbname_%BACKUP_FILE% dbname
}}}
 # Выполнить в консоли (путь указать в кавычках, если он содержит пробелы):
  * `at 01:00 /every:M,T,W,Th,F "полный путь к bat-файлу"`

==== Ubuntu ====

 # Создать скрипт с правами `700` (можно и не так жестоко в принципе), содержащий следующий код:
{{{
#! /bin/sh

# Заменить <backup_folder> на полный путь к защищенной папке, 
# в которой будут храниться бэкапы.

export PGPASSWORD=password
dbname=$1
dumpdate=`date +%d_%m_20%y`
dash="_"

/usr/bin/pg_dump --host localhost --username postgres --format custom --blobs --file "<backup_folder>/$dbname$dash$dumpdate.backup" $dbname
}}}
 # `sudo crontab -u root -e`
 # Добавить строку (заменить `dbname` на имя вашей базы):
  * `0 1 * * 1-5 полный_путь_к_скрипту dbname`

Таким образом, каждую неделю с понедельника по пятницу в час ночи будет выполняться наш скрипт. В результате будут появляться бэкапы с названиями типа *`mybase_05_09_2011`*.

= Дополнительно =

Всюду далее *World menu* - это меню, которое появится, если щелкнуть левой кнопкой мыши на сером фоне.

== Как выполнить Smalltalk-код ==

World menu -> Workspace -> скопировать код в появившееся поле -> выделить код и нажать правую кнопку мыши -> Do it

== Как обновить шрифты ==

World menu -> System -> Settings -> в поле ввода 'Search for' ввести font и нажать Enter -> нажать кнопку Launch напротив 'Install bitmap Dejavu fonts' -> нажать кнопку Launch напротив 'Update fonts from system'

== Как сохранить образ ==

World menu -> Save